import os
import json
import logging
from flask import Flask, request, jsonify
import gspread
from google.oauth2.service_account import Credentials

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("mt4_proxy_server")

app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
sheet = None
init_error = None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets
try:
    creds_json = os.getenv("GOOGLE_CREDENTIALS")
    if not creds_json:
        raise ValueError("GOOGLE_CREDENTIALS –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    creds_dict = json.loads(creds_json)
    scopes = ["https://www.googleapis.com/auth/spreadsheets"]
    creds = Credentials.from_service_account_info(creds_dict, scopes=scopes)

    client = gspread.authorize(creds)

    sheet_id = os.getenv("SPREADSHEET_ID")
    if not sheet_id:
        raise ValueError("SPREADSHEET_ID –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    sheet = client.open_by_key(sheet_id).worksheet("Forex")
    logger.info("‚úÖ Google Sheet —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

except Exception as e:
    init_error = str(e)
    logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: %s", init_error)


@app.route("/", methods=["GET"])
def index():
    status = {
        "status": "running",
        "sheet_initialized": sheet is not None,
    }
    if init_error:
        status["init_error"] = init_error
    return jsonify(status)


@app.route("/send", methods=["POST"])
def receive_data():
    global sheet
    if not sheet:
        return jsonify({"error": "Google Sheet –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", "init_error": init_error}), 500

    try:
        raw_data = request.get_data().decode("utf-8")
        logger.info("üì• RAW BODY: %s", raw_data)

        data = json.loads(raw_data)
        logger.info("‚úÖ JSON –ø–æ–ª—É—á–µ–Ω: %s", data)

        required_fields = ["account", "balance", "equity", "profit", "drawdown", "name"]
        values = []
        for field in required_fields:
            if field not in data:
                raise ValueError(f"Missing field: {field}")
            values.append(str(data[field]))

        sheet.append_row(values)
        logger.info("üì§ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã: %s", values)
        return jsonify({"status": "success"}), 200

    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: %s", str(e))
        return jsonify({"error": str(e)}), 400


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8000)
